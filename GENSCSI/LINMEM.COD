;	Static Name Aliases
;
	TITLE   .\src\linmem.c
	.8087
INCLUDELIB	LLIBCE
MAINSEG	SEGMENT  WORD PUBLIC 'CODE'
MAINSEG	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP
	ASSUME  SS: NOTHING
EXTRN	_dev_help32:FAR
MAINSEG      SEGMENT
	ASSUME	CS: MAINSEG
;|*** /*****************************************************************************/
; Line 1
;|*** /* Routines for managing LINEAR accessed memory                              */
;|*** /*                                                                           */
;|*** /*****************************************************************************/
;|*** #include "genscsi.h"
; Line 5
;|*** #include "const.h"
; Line 1
;|*** #include "struc.h"
; Line 2
;|*** #include "externs.h"
; Line 3
;|*** 
;|*** /* Create a Linear address in the current process from a 16:16 bit pointer */
;|*** _32bits far virt_to_lin(_32bits ptr_16)
;|*** {
; Line 9
	PUBLIC	_virt_to_lin
_virt_to_lin	PROC FAR
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	81 ec 4c 00 		sub	sp,76
	*** 000007	57 			push	di
	*** 000008	56 			push	si
;	in_regs = -36
;	out_regs = -72
;	ret_val = -76
;	ptr_16 = 6
;|***   union cpu_regs32 in_regs,out_regs;
;|***   _32bits          ret_val;
;|*** 
;|***   in_regs.D.EAX = 0L;
; Line 13
	*** 000009	2b c0 			sub	ax,ax
	*** 00000b	89 46 de 		mov	WORD PTR [bp-34],ax
	*** 00000e	89 46 dc 		mov	WORD PTR [bp-36],ax	;in_regs
;|***   in_regs.W.AX = ptr_16._segadr.segment;
; Line 14
	*** 000011	8b 46 08 		mov	ax,WORD PTR [bp+8]
	*** 000014	89 46 dc 		mov	WORD PTR [bp-36],ax	;in_regs
;|***   in_regs.D.ESI = 0L;
; Line 15
	*** 000017	2b c0 			sub	ax,ax
	*** 000019	89 46 ee 		mov	WORD PTR [bp-18],ax
	*** 00001c	89 46 ec 		mov	WORD PTR [bp-20],ax
;|***   in_regs.W.SI = ptr_16._segadr.offset;
; Line 16
	*** 00001f	8b 46 06 		mov	ax,WORD PTR [bp+6]	;ptr_16
	*** 000022	89 46 ec 		mov	WORD PTR [bp-20],ax
;|***   in_regs.D.EDX = 0L;
; Line 17
	*** 000025	2b c0 			sub	ax,ax
	*** 000027	89 46 ea 		mov	WORD PTR [bp-22],ax
	*** 00002a	89 46 e8 		mov	WORD PTR [bp-24],ax
;|***   in_regs.B.DL = devhlp_VirtToLin;           /* DevHlp command               */
; Line 18
	*** 00002d	c6 46 e8 5b 		mov	BYTE PTR [bp-24],91
;|***   in_regs.W.es_valid = FALSE;                /* Use current ES and DS regs   */
; Line 19
	*** 000031	c6 46 fe 00 		mov	BYTE PTR [bp-2],0
;|***   in_regs.W.ds_valid = FALSE;
; Line 20
	*** 000035	c6 46 ff 00 		mov	BYTE PTR [bp-1],0
;|***   dev_help32(&in_regs,&out_regs);
; Line 21
	*** 000039	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;out_regs
	*** 00003c	16 			push	ss
	*** 00003d	50 			push	ax
	*** 00003e	8d 46 dc 		lea	ax,WORD PTR [bp-36]	;in_regs
	*** 000041	16 			push	ss
	*** 000042	50 			push	ax
	*** 000043	9a 00 00 00 00 		call	FAR PTR _dev_help32
	*** 000048	83 c4 08 		add	sp,8
;|***                                              /* If failure                   */
;|***   if ((out_regs.W.flags & 0x0001) != 0) {    /*    Return -1                 */
; Line 23
	*** 00004b	f6 46 d6 01 		test	BYTE PTR [bp-42],1
	*** 00004f	75 03 			jne	$JCC79
	*** 000051	e9 0b 00 		jmp	$I184
					$JCC79:
;|***      ret_val.phys = 0;
; Line 24
	*** 000054	2b c0 			sub	ax,ax
	*** 000056	89 46 b6 		mov	WORD PTR [bp-74],ax
	*** 000059	89 46 b4 		mov	WORD PTR [bp-76],ax	;ret_val
;|***      }                                       /* Else                         */
; Line 25
;|***   else
; Line 26
	*** 00005c	e9 0c 00 		jmp	$I185
					$I184:
;|***      {
; Line 27
;|***      ret_val.phys = out_regs.D.EAX;
; Line 28
	*** 00005f	8b 46 b8 		mov	ax,WORD PTR [bp-72]	;out_regs
	*** 000062	8b 56 ba 		mov	dx,WORD PTR [bp-70]
	*** 000065	89 46 b4 		mov	WORD PTR [bp-76],ax	;ret_val
	*** 000068	89 56 b6 		mov	WORD PTR [bp-74],dx
;|***      }
; Line 29
					$I185:
;|***   return(ret_val);                           /*    Return 0                  */
; Line 30
	*** 00006b	8b 46 b4 		mov	ax,WORD PTR [bp-76]	;ret_val
	*** 00006e	8b 56 b6 		mov	dx,WORD PTR [bp-74]
	*** 000071	e9 00 00 		jmp	$EX180
;|*** }
; Line 31
					$EX180:
	*** 000074	5e 			pop	si
	*** 000075	5f 			pop	di
	*** 000076	8b e5 			mov	sp,bp
	*** 000078	5d 			pop	bp
	*** 000079	cb 			ret	

_virt_to_lin	ENDP
;|*** 
;|*** 
;|*** /* Creates a linear address from a page list (scatter/gather list) */
;|*** void far lin_to_pages(_32bits addr, _32bits pages, _32bits count)
;|*** {
; Line 36
	PUBLIC	_lin_to_pages
_lin_to_pages	PROC FAR
	*** 00007a	55 			push	bp
	*** 00007b	8b ec 			mov	bp,sp
	*** 00007d	81 ec 48 00 		sub	sp,72
	*** 000081	57 			push	di
	*** 000082	56 			push	si
;	in_regs = -36
;	out_regs = -72
;	count = 14
;	pages = 10
;	addr = 6
;|***   union cpu_regs32 in_regs,out_regs;
;|*** 
;|***   in_regs.D.EAX = addr.phys;
; Line 39
	*** 000083	8b 46 06 		mov	ax,WORD PTR [bp+6]	;addr
	*** 000086	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 000089	89 46 dc 		mov	WORD PTR [bp-36],ax	;in_regs
	*** 00008c	89 56 de 		mov	WORD PTR [bp-34],dx
;|***   in_regs.D.ECX = count.phys;
; Line 40
	*** 00008f	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;count
	*** 000092	8b 56 10 		mov	dx,WORD PTR [bp+16]
	*** 000095	89 46 e4 		mov	WORD PTR [bp-28],ax
	*** 000098	89 56 e6 		mov	WORD PTR [bp-26],dx
;|***   in_regs.D.EDI = pages.phys;
; Line 41
	*** 00009b	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;pages
	*** 00009e	8b 56 0c 		mov	dx,WORD PTR [bp+12]
	*** 0000a1	89 46 f0 		mov	WORD PTR [bp-16],ax
	*** 0000a4	89 56 f2 		mov	WORD PTR [bp-14],dx
;|***   in_regs.B.DL = devhlp_LinToPageList;       /* DevHlp command               */
; Line 42
	*** 0000a7	c6 46 e8 5e 		mov	BYTE PTR [bp-24],94
;|***   in_regs.W.es_valid = FALSE;                /* Use current ES and DS regs   */
; Line 43
	*** 0000ab	c6 46 fe 00 		mov	BYTE PTR [bp-2],0
;|***   in_regs.W.ds_valid = FALSE;
; Line 44
	*** 0000af	c6 46 ff 00 		mov	BYTE PTR [bp-1],0
;|***   dev_help32(&in_regs,&out_regs);
; Line 45
	*** 0000b3	8d 46 b8 		lea	ax,WORD PTR [bp-72]	;out_regs
	*** 0000b6	16 			push	ss
	*** 0000b7	50 			push	ax
	*** 0000b8	8d 46 dc 		lea	ax,WORD PTR [bp-36]	;in_regs
	*** 0000bb	16 			push	ss
	*** 0000bc	50 			push	ax
	*** 0000bd	9a 00 00 00 00 		call	FAR PTR _dev_help32
	*** 0000c2	83 c4 08 		add	sp,8
;|***                                              /* If failure                   */
;|***   return;                                   /*    Return 0                  */
; Line 47
	*** 0000c5	e9 00 00 		jmp	$EX189
;|*** }
; Line 48
					$EX189:
	*** 0000c8	5e 			pop	si
	*** 0000c9	5f 			pop	di
	*** 0000ca	8b e5 			mov	sp,bp
	*** 0000cc	5d 			pop	bp
	*** 0000cd	cb 			ret	

_lin_to_pages	ENDP
MAINSEG	ENDS
END
;|*** 
;|*** 
