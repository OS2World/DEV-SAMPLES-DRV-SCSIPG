;	Static Name Aliases
;
	TITLE   .\src\strategy.c
	.8087
INCLUDELIB	LLIBCE
MAINSEG	SEGMENT  WORD PUBLIC 'CODE'
MAINSEG	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP
	ASSUME  SS: NOTHING
EXTRN	_ioctl:FAR
EXTRN	_init_mod:FAR
EXTRN	_open:FAR
EXTRN	_close:FAR
EXTRN	_dev_done:FAR
MAINSEG      SEGMENT
	ASSUME	CS: MAINSEG
;|*** /***************************************************************************/
; Line 1
;|*** /* strategy_c(req_hdr)                                                     */
;|*** /*  Strategy function. Called by assembler portion of strategy entry point */
;|*** /*  of DD, this is functionally the strategy entry point.  It looks at the */
;|*** /*  command portion of the request packet an calls the proper function.    */
;|*** /*                                                                         */
;|*** /*  There is only 4 command that really do anything - INIT, OPEN, CLOSE,   */
;|*** /*  and IOCtl.  The others just return an error signifying that we don't   */
;|*** /*  accept that command.                                                   */
;|*** /*                                                                         */
;|*** /*  All commands return a value that will be ORed with the DONE bit and    */
;|*** /*  set into the request packet's STATUS field via DEV_DONE, except INIT   */
;|*** /*  which sets the status field directly as the DevDone Device Helper is   */
;|*** /*  not valid at INIT time.                                                */
;|*** /*                                                                         */
;|*** /***************************************************************************/
;|*** #include "genscsi.h"
; Line 17
;|*** #include "const.h"
; Line 1
;|*** #include "struc.h"
; Line 2
;|*** #include "externs.h"
; Line 3
;|*** 
;|*** int near strategy_c(req_hdr)
;|*** struct reqhdr *req_hdr;
; Line 20
	PUBLIC	_strategy_c
_strategy_c	PROC NEAR
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	81 ec 02 00 		sub	sp,2
	*** 000007	57 			push	di
	*** 000008	56 			push	si
;	rc = -2
;	req_hdr = 4
;|*** {
;|***   word rc;
;|*** 
;|***   /* Check to see if the command is outside the range of valid commands */
;|***   if (req_hdr->rh_cmd > MAXCMD) { rc = ERROR+INV_CMD; }
; Line 25
	*** 000009	c4 5e 04 		les	bx,DWORD PTR [bp+4]	;req_hdr
	*** 00000c	26 80 7f 02 1b 		cmp	BYTE PTR es:[bx+2],27
	*** 000011	77 03 			ja	$JCC17
	*** 000013	e9 08 00 		jmp	$I182
					$JCC17:
	*** 000016	c7 46 fe 03 80 		mov	WORD PTR [bp-2],-32765	;rc
;|***   else {
; Line 26
	*** 00001b	e9 86 00 		jmp	$I183
					$I182:
;|*** 
;|***   /* Different commands call for different functions */
;|***      switch (req_hdr->rh_cmd) {
; Line 29
	*** 00001e	c4 5e 04 		les	bx,DWORD PTR [bp+4]	;req_hdr
	*** 000021	26 8a 47 02 		mov	al,BYTE PTR es:[bx+2]
	*** 000025	2a e4 			sub	ah,ah
	*** 000027	e9 5b 00 		jmp	$S184
;|***         case  0 :                          /* Init */
; Line 30
					$SC188:
;|***                   rc = init_mod((struct init_hdr_in *)req_hdr);
; Line 31
	*** 00002a	ff 76 06 		push	WORD PTR [bp+6]
	*** 00002d	ff 76 04 		push	WORD PTR [bp+4]	;req_hdr
	*** 000030	9a 00 00 00 00 		call	FAR PTR _init_mod
	*** 000035	83 c4 04 		add	sp,4
	*** 000038	89 46 fe 		mov	WORD PTR [bp-2],ax	;rc
;|***                   break;
; Line 32
	*** 00003b	e9 66 00 		jmp	$SB185
;|*** 
;|***         case 13 :
; Line 34
					$SC189:
;|***                   rc = open(req_hdr);      /* Open */
; Line 35
	*** 00003e	ff 76 06 		push	WORD PTR [bp+6]
	*** 000041	ff 76 04 		push	WORD PTR [bp+4]	;req_hdr
	*** 000044	9a 00 00 00 00 		call	FAR PTR _open
	*** 000049	83 c4 04 		add	sp,4
	*** 00004c	89 46 fe 		mov	WORD PTR [bp-2],ax	;rc
;|***                   break;
; Line 36
	*** 00004f	e9 52 00 		jmp	$SB185
;|*** 
;|***         case 14 :
; Line 38
					$SC190:
;|***                   rc = close(req_hdr);     /* Close */
; Line 39
	*** 000052	ff 76 06 		push	WORD PTR [bp+6]
	*** 000055	ff 76 04 		push	WORD PTR [bp+4]	;req_hdr
	*** 000058	9a 00 00 00 00 		call	FAR PTR _close
	*** 00005d	83 c4 04 		add	sp,4
	*** 000060	89 46 fe 		mov	WORD PTR [bp-2],ax	;rc
;|***                   break;
; Line 40
	*** 000063	e9 3e 00 		jmp	$SB185
;|*** 
;|***         case 16 :
; Line 42
					$SC191:
;|***                   rc = ioctl(req_hdr);     /* IOCtl */
; Line 43
	*** 000066	ff 76 06 		push	WORD PTR [bp+6]
	*** 000069	ff 76 04 		push	WORD PTR [bp+4]	;req_hdr
	*** 00006c	9a 00 00 00 00 		call	FAR PTR _ioctl
	*** 000071	83 c4 04 		add	sp,4
	*** 000074	89 46 fe 		mov	WORD PTR [bp-2],ax	;rc
;|***                   break;
; Line 44
	*** 000077	e9 2a 00 		jmp	$SB185
;|*** 
;|***         default :                          /* We don't do no mo' commands */
; Line 46
					$SD193:
;|***                   rc = ERROR+INV_CMD;
; Line 47
	*** 00007a	c7 46 fe 03 80 		mov	WORD PTR [bp-2],-32765	;rc
;|***                   break;
; Line 48
	*** 00007f	e9 22 00 		jmp	$SB185
;|***      } /* switch */
; Line 49
	*** 000082	e9 1f 00 		jmp	$SB185
					$S184:
	*** 000085	0b c0 			or	ax,ax
	*** 000087	75 03 			jne	$JCC135
	*** 000089	e9 9e ff 		jmp	$SC188
					$JCC135:
	*** 00008c	2d 0d 00 		sub	ax,13
	*** 00008f	75 03 			jne	$JCC143
	*** 000091	e9 aa ff 		jmp	$SC189
					$JCC143:
	*** 000094	48 			dec	ax
	*** 000095	75 03 			jne	$JCC149
	*** 000097	e9 b8 ff 		jmp	$SC190
					$JCC149:
	*** 00009a	48 			dec	ax
	*** 00009b	48 			dec	ax
	*** 00009c	75 03 			jne	$JCC156
	*** 00009e	e9 c5 ff 		jmp	$SC191
					$JCC156:
	*** 0000a1	e9 d6 ff 		jmp	$SD193
					$SB185:
;|***    } /* else */
; Line 50
					$I183:
;|*** 
;|***   /* Unblock the waiting app */
;|***   if (req_hdr->rh_cmd) { dev_done(req_hdr,rc); }
; Line 53
	*** 0000a4	c4 5e 04 		les	bx,DWORD PTR [bp+4]	;req_hdr
	*** 0000a7	26 80 7f 02 00 		cmp	BYTE PTR es:[bx+2],0
	*** 0000ac	75 03 			jne	$JCC172
	*** 0000ae	e9 14 00 		jmp	$I194
					$JCC172:
	*** 0000b1	ff 76 fe 		push	WORD PTR [bp-2]	;rc
	*** 0000b4	ff 76 06 		push	WORD PTR [bp+6]
	*** 0000b7	ff 76 04 		push	WORD PTR [bp+4]	;req_hdr
	*** 0000ba	9a 00 00 00 00 		call	FAR PTR _dev_done
	*** 0000bf	83 c4 06 		add	sp,6
;|***   else { req_hdr->rh_stat = rc; }
; Line 54
	*** 0000c2	e9 0a 00 		jmp	$I195
					$I194:
	*** 0000c5	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;rc
	*** 0000c8	c4 5e 04 		les	bx,DWORD PTR [bp+4]	;req_hdr
	*** 0000cb	26 89 47 03 		mov	WORD PTR es:[bx+3],ax
					$I195:
;|*** 
;|***   return(SUCCESS);
; Line 56
	*** 0000cf	b8 00 00 		mov	ax,0
	*** 0000d2	e9 00 00 		jmp	$EX180
;|*** 
;|*** }
; Line 58
					$EX180:
	*** 0000d5	5e 			pop	si
	*** 0000d6	5f 			pop	di
	*** 0000d7	8b e5 			mov	sp,bp
	*** 0000d9	5d 			pop	bp
	*** 0000da	c3 			ret	

_strategy_c	ENDP
MAINSEG	ENDS
END
