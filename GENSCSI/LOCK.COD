;	Static Name Aliases
;
	TITLE   .\src\lock.c
	.8087
INCLUDELIB	LLIBCE
MAINSEG	SEGMENT  WORD PUBLIC 'CODE'
MAINSEG	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP
	ASSUME  SS: NOTHING
PUBLIC  _in_unlock
PUBLIC  _lock_count
EXTRN	_dev_help:FAR
_DATA      SEGMENT
_in_unlock	DW	00H
_lock_count	DW	00H
_DATA      ENDS
MAINSEG      SEGMENT
	ASSUME	CS: MAINSEG
;|*** /****************************************************************************/
; Line 1
;|*** /* Routines for locking and unlocking segments                              */
;|*** /****************************************************************************/
;|*** /* Lock a segment                                                           */
;|*** /*                                                                          */
;|*** /* long lock(sel)                                                           */
;|*** /* unsigned sel; - Selector to segment to lock down                         */
;|*** /*                                                                          */
;|*** /* Return value - Lock handle of segment, 0 if the lock failed              */
;|*** /*                                                                          */
;|*** /* This function requests OS/2 lock the segment.  The request is for a      */
;|*** /* short term lock.  THis is done because a long term lock causes OS/2 to   */
;|*** /* swap something out, degrading performance to an unacceptable level.  The */
;|*** /* short term lock doesn't seem to do that.  The function returns the 'lock */
;|*** /* handle' that is needed to unlock the segment later.  It returns a lock   */
;|*** /* handle of 0 if the lock fails.  It also increments the variable          */
;|*** /* lock_count.  This is a useful debug tool as the single most common cause */
;|*** /* of the dreaded "Internal Error Detected at.."  message is an error in    */
;|*** /* lock/unlock.  Either we are passing an invalid lock handle to UNLOCK or  */
;|*** /* we locked down too much without unlocking.  This counter will be very    */
;|*** /* high (on the order of 0x180 or more if the latter is the case.           */
;|*** /*                                                                          */
;|*** /****************************************************************************/
;|*** /* Unlock a segment                                                         */
;|*** /*                                                                          */
;|*** /* unsigned unlock(handle)                                                  */
;|*** /* long handle; - Lock handle of segment to unlock                          */
;|*** /*                                                                          */
;|*** /* Return value - SUCCESS or -1 if the unlock failed                        */
;|*** /*                                                                          */
;|*** /* This function requests OS/2 unlock a previously locked segment.  If the  */
;|*** /* handle passed is 0, the function just returns SUCCESS.  This lets the DD */
;|*** /* unlock a segment and store 0 in the place of the lock handle.  Later, if */
;|*** /* it tries to unlock the same segment again, the function will recognize   */
;|*** /* this fact and act as if the unlock was successful.  This lets the unlock */
;|*** /* activity use a small number of common routines.                          */
;|*** /*                                                                          */
;|*** /* The function also decrements the lock_count variable and sets in_unlock  */
;|*** /* to TRUE while the device helper routine is being called.  This is        */
;|*** /* another debug facility to help detect when a bad lock handle is passed.  */
;|*** /*                                                                          */
;|*** /****************************************************************************/
;|*** #include <stdio.h>
; Line 43
;|*** #include "genscsi.h"
; Line 44
;|*** #include "const.h"
; Line 1
;|*** #include "struc.h"
; Line 2
;|*** #include "externs.h"
; Line 3
;|*** 
;|*** boolean near in_unlock = FALSE;  /* in_unlock starts out FALSE */
;|*** word    near lock_count = 0;     /* lock_count starts out 0    */
;|*** 
;|*** unsigned long far lock(sel)
;|*** word sel;
; Line 50
	PUBLIC	_lock
_lock	PROC FAR
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
	*** 000003	81 ec 30 00 		sub	sp,48
	*** 000007	57 			push	di
	*** 000008	56 			push	si
;	handle = -48
;	in_regs = -22
;	out_regs = -44
;	sel = 6
;|*** {
;|***   physaddr handle;
;|***   union cpu_regs in_regs;
;|***   union cpu_regs out_regs;
;|*** 
;|***   in_regs.W.AX = sel;                              /* AX holds the selector  */
; Line 56
	*** 000009	8b 46 06 		mov	ax,WORD PTR [bp+6]	;sel
	*** 00000c	89 46 ea 		mov	WORD PTR [bp-22],ax	;in_regs
;|***   in_regs.B.BH = 0;                                /* Short term block       */
; Line 57
	*** 00000f	c6 46 ed 00 		mov	BYTE PTR [bp-19],0
;|***   in_regs.B.BL = 0;                                /* Block - I'll wait      */
; Line 58
	*** 000013	c6 46 ec 00 		mov	BYTE PTR [bp-20],0
;|***   in_regs.W.es_valid = FALSE;                      /* Use current ES and DS  */
; Line 59
	*** 000017	c6 46 fe 00 		mov	BYTE PTR [bp-2],0
;|***   in_regs.W.ds_valid = FALSE;
; Line 60
	*** 00001b	c6 46 ff 00 		mov	BYTE PTR [bp-1],0
;|***   in_regs.B.DL = devhlp_Lock;                      /* Do it                  */
; Line 61
	*** 00001f	c6 46 f0 13 		mov	BYTE PTR [bp-16],19
;|***   dev_help(&in_regs,&out_regs);
; Line 62
	*** 000023	8d 46 d4 		lea	ax,WORD PTR [bp-44]	;out_regs
	*** 000026	16 			push	ss
	*** 000027	50 			push	ax
	*** 000028	8d 46 ea 		lea	ax,WORD PTR [bp-22]	;in_regs
	*** 00002b	16 			push	ss
	*** 00002c	50 			push	ax
	*** 00002d	9a 00 00 00 00 		call	FAR PTR _dev_help
	*** 000032	83 c4 08 		add	sp,8
;|***   if ((out_regs.W.flags & 0x0001) != 0) {          /* If it failed           */
; Line 63
	*** 000035	f6 46 e6 01 		test	BYTE PTR [bp-26],1
	*** 000039	75 03 			jne	$JCC57
	*** 00003b	e9 09 00 		jmp	$I249
					$JCC57:
;|***      return(0L);                                   /*    Return 0            */
; Line 64
	*** 00003e	b8 00 00 		mov	ax,0
	*** 000041	ba 00 00 		mov	dx,0
	*** 000044	e9 19 00 		jmp	$EX245
;|***      }                                             /* Endif                  */
; Line 65
;|***   lock_count++;                                    /* Increment lock count   */
; Line 66
					$I249:
	*** 000047	ff 06 02 00 		inc	WORD PTR _lock_count
;|***   handle = (out_regs.W.AX * 0x10000) + out_regs.W.BX;  /* Build lock handle  */
; Line 67
	*** 00004b	8b 46 d4 		mov	ax,WORD PTR [bp-44]	;out_regs
	*** 00004e	8b 4e d6 		mov	cx,WORD PTR [bp-42]
	*** 000051	89 4e d0 		mov	WORD PTR [bp-48],cx	;handle
	*** 000054	89 46 d2 		mov	WORD PTR [bp-46],ax
;|***   return(handle);                                  /* And return it to caller*/
; Line 68
	*** 000057	8b 46 d0 		mov	ax,WORD PTR [bp-48]	;handle
	*** 00005a	8b 56 d2 		mov	dx,WORD PTR [bp-46]
	*** 00005d	e9 00 00 		jmp	$EX245
;|*** }
; Line 69
					$EX245:
	*** 000060	5e 			pop	si
	*** 000061	5f 			pop	di
	*** 000062	8b e5 			mov	sp,bp
	*** 000064	5d 			pop	bp
	*** 000065	cb 			ret	

_lock	ENDP
;|*** 
;|*** word far unlock(han)
;|*** unsigned long han;
; Line 72
	PUBLIC	_unlock
_unlock	PROC FAR
	*** 000066	55 			push	bp
	*** 000067	8b ec 			mov	bp,sp
	*** 000069	81 ec 30 00 		sub	sp,48
	*** 00006d	57 			push	di
	*** 00006e	56 			push	si
;	in_regs = -22
;	out_regs = -44
;	handle = -48
;	han = 6
;|*** {
;|***   union cpu_regs in_regs;
;|***   union cpu_regs out_regs;
;|***   _32bits        handle;
;|*** 
;|*** 
;|***      /* If the lock handle is 0, already unlocked, just say we did it */
;|***      handle.phys = han;
; Line 80
	*** 00006f	8b 46 06 		mov	ax,WORD PTR [bp+6]	;han
	*** 000072	8b 56 08 		mov	dx,WORD PTR [bp+8]
	*** 000075	89 46 d0 		mov	WORD PTR [bp-48],ax	;handle
	*** 000078	89 56 d2 		mov	WORD PTR [bp-46],dx
;|***      if (handle.phys == 0L) { return(SUCCESS); }
; Line 81
	*** 00007b	8b 46 d2 		mov	ax,WORD PTR [bp-46]
	*** 00007e	0b 46 d0 		or	ax,WORD PTR [bp-48]	;handle
	*** 000081	74 03 			je	$JCC129
	*** 000083	e9 06 00 		jmp	$I255
					$JCC129:
	*** 000086	b8 00 00 		mov	ax,0
	*** 000089	e9 4b 00 		jmp	$EX251
;|*** 
;|***      in_regs.W.AX = handle._2words.high;       /* AX:BX hold the lock handle */
; Line 83
					$I255:
	*** 00008c	8b 46 d2 		mov	ax,WORD PTR [bp-46]
	*** 00008f	89 46 ea 		mov	WORD PTR [bp-22],ax	;in_regs
;|***      in_regs.W.BX = handle._2words.low;
; Line 84
	*** 000092	8b 46 d0 		mov	ax,WORD PTR [bp-48]	;handle
	*** 000095	89 46 ec 		mov	WORD PTR [bp-20],ax
;|***      in_regs.W.es_valid = FALSE;               /* Use current ES and DS      */
; Line 85
	*** 000098	c6 46 fe 00 		mov	BYTE PTR [bp-2],0
;|***      in_regs.W.ds_valid = FALSE;
; Line 86
	*** 00009c	c6 46 ff 00 		mov	BYTE PTR [bp-1],0
;|***      in_unlock = TRUE;                         /* Mark that we are in UNLOCK */
; Line 87
	*** 0000a0	c7 06 00 00 01 00 	mov	WORD PTR _in_unlock,1
;|***      in_regs.B.DL = devhlp_Unlock;             /* Do it                      */
; Line 88
	*** 0000a6	c6 46 f0 14 		mov	BYTE PTR [bp-16],20
;|***      dev_help(&in_regs,&out_regs);
; Line 89
	*** 0000aa	8d 46 d4 		lea	ax,WORD PTR [bp-44]	;out_regs
	*** 0000ad	16 			push	ss
	*** 0000ae	50 			push	ax
	*** 0000af	8d 46 ea 		lea	ax,WORD PTR [bp-22]	;in_regs
	*** 0000b2	16 			push	ss
	*** 0000b3	50 			push	ax
	*** 0000b4	9a 00 00 00 00 		call	FAR PTR _dev_help
	*** 0000b9	83 c4 08 		add	sp,8
;|***      in_unlock = FALSE;                        /* Done unlocking             */
; Line 90
	*** 0000bc	c7 06 00 00 00 00 	mov	WORD PTR _in_unlock,0
;|***      if ((out_regs.W.flags & 0x0001) != 0) {   /* If it failed               */
; Line 91
	*** 0000c2	f6 46 e6 01 		test	BYTE PTR [bp-26],1
	*** 0000c6	75 03 			jne	$JCC198
	*** 0000c8	e9 06 00 		jmp	$I256
					$JCC198:
;|***         return(-1);                            /*     Return -1              */
; Line 92
	*** 0000cb	b8 ff ff 		mov	ax,-1
	*** 0000ce	e9 06 00 		jmp	$EX251
;|***         }                                      /* Endif
; Line 93
;|***      lock_count--;                             /* Decrement lock count       */
;|*** 
;|***      return(SUCCESS);                          /* Return SUCCESS             */
; Line 96
					$I256:
	*** 0000d1	b8 00 00 		mov	ax,0
	*** 0000d4	e9 00 00 		jmp	$EX251
;|*** }
; Line 97
					$EX251:
	*** 0000d7	5e 			pop	si
	*** 0000d8	5f 			pop	di
	*** 0000d9	8b e5 			mov	sp,bp
	*** 0000db	5d 			pop	bp
	*** 0000dc	cb 			ret	

_unlock	ENDP
MAINSEG	ENDS
END
;|*** 
